syntax = "proto3";
package warden.warden.v1beta3;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta3";

message InferenceRequest {
  uint64 id = 1;
  string creator = 2;
  SolverInput input = 3;
  SolverResponse response = 4;
  string error = 5;
  uint64 created_at = 6;
  uint64 updated_at = 7;
  string contract_callback = 8;
}

message InferenceResult {
  uint64 id = 1;
  SolverResponse response = 2;
  string error = 3;
}

message InferenceTx {
  uint64 magic_number = 1;
  repeated InferenceResult results = 2;
}

message SolverRequest {
  SolverInput solver_input = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "solverInput"];
  int64 ExpectedItems = 2 [(gogoproto.jsontag) = "expectedItems"];
  double FalsePositiveRate = 3 [(gogoproto.jsontag) = "falsePositiveRate"];
}

message SolverInput {
  repeated string tokens = 1;
  bool adversary_mode = 2 [(gogoproto.jsontag) = "adversaryMode"];
}

message SolverResponse {
  SolverOutput solver_output = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "solverOutput"];
  bytes solver_receipt = 2 [(gogoproto.jsontag) = "solverReceipt"];
}

message SolverOutput {
  repeated Forecast forecasts = 1 [(gogoproto.nullable) = false];
}

message Forecast {
  string key = 1;
  string value = 2 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (amino.dont_omitempty) = true,
    (gogoproto.nullable)   = false
  ];
}
