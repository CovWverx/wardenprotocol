syntax = "proto3";
package warden.async.v1beta1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "warden/async/v1beta1/params.proto";
import "warden/async/v1beta1/future.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/async/types/v1beta1";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/wardenprotocol/warden/async/params";
  }

  // Queries a list of Futures.
  rpc Futures(QueryFuturesRequest) returns (QueryFuturesResponse) {
    option (google.api.http).get = "/wardenprotocol/warden/async/futures";
  }

  // Queries a Future by its id.
  rpc FutureById(QueryFutureByIdRequest) returns (QueryFutureByIdResponse) {
    option (google.api.http).get = "/wardenprotocol/warden/async/future/{id}";
  }

  rpc PendingFutures(QueryPendingFuturesRequest) returns (QueryPendingFuturesResponse) {
    option (google.api.http).get = "/wardenprotocol/warden/async/pending_futures";
  }

  rpc FuturesPendingVote(QueryFuturesPendingVoteRequest) returns (QueryFuturesPendingVoteResponse) {
    option (google.api.http).get = "/wardenprotocol/warden/async/futures_pending_vote";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryFuturesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // optional filter to query futures by creator
  string creator = 2 [ (gogoproto.nullable) = true, (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message FutureResponse {
  Future future = 1 [ (gogoproto.nullable) = false ];
  repeated FutureVote votes = 2 [ (gogoproto.nullable) = false ];
  FutureResult result = 3 [ (gogoproto.nullable) = true ];
}

message QueryFuturesResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated FutureResponse futures = 2 [ (gogoproto.nullable) = false ];
}

message QueryFutureByIdRequest {
  uint64 id = 1;
}

message QueryFutureByIdResponse {
  Future future = 1 [ (gogoproto.nullable) = false ];
}

message QueryPendingFuturesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPendingFuturesResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated Future futures = 2 [ (gogoproto.nullable) = false ];
}

message QueryFuturesPendingVoteRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // filter by futures that do not have a vote from this validator
  string validator = 2 [ (gogoproto.nullable) = true, (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message FutureWithResultResponse {
  Future future = 1 [ (gogoproto.nullable) = false ];
  FutureResult result = 2 [ (gogoproto.nullable) = true ];
}

message QueryFuturesPendingVoteResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated FutureWithResultResponse futures = 2 [ (gogoproto.nullable) = false ];
}
